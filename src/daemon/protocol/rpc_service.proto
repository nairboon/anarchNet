import "util.proto";

message Hostlist {
repeated string urls = 1;
}

message PeerInfo {
 required string ip = 1;
 required int32 port = 2;
}


message Document {
 required string id = 1;
 required string owner = 2;
 required string content = 3;
}

message DocumentUpdateReq {
 required string id = 1;
 required string newcontent = 2;
}

message InfoResponse {
 optional int32 anVersion = 1;
 optional int32 uptime = 3;
 optional int32 connectedNodes = 4;
 enum OperatingSystem {
 osBSD = 0;
 osLinux = 1;
 osMac = 2;
 osWin = 3;
 osOther = 4;
}
optional OperatingSystem operatingsystem = 9;
repeated Extension extensions = 10;
}

// Turn off the built-in generation of services classes
option cc_generic_services = false;

service RPCService {
 rpc bootstrapFromPeer (PeerInfo) returns (Status);
 rpc bootstrapFromHostlist (Hostlist) returns (Status);

 rpc createDocument (Document) returns (Status);
 rpc watchDocument (Document) returns (Status);
 rpc unwatchDocument (Document) returns (Status);
 rpc deleteDocument (Document) returns (Status);
 rpc updateDocument (DocumentUpdateReq) returns (Status);

 rpc getInfo (Void) returns (InfoResponse);
}
