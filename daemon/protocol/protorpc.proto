// Protocol Buffers Just Enough RPC - RPC with Google Protocol Buffers and Services
// Copyright 2010 Andrew Kimpton.  All rights reserved.
// http://code.google.com/p/protobuf-jerpc
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Author: awk@awkward.org

package awk.protobuf.jerpc;

// Turn off the built-in generation of services classes
option cc_generic_services = false;

message Request {

  // RPC service full name
  required string service_name = 1;

  // RPC method name
  required string method_name = 2;

  // RPC request proto
  required bytes request_proto = 3;
}

message Response {

  // RPC response proto
  optional bytes response_proto = 1;

  // Error, if any
  optional string error = 2;

  // Was callback invoked
  optional bool callback = 3 [default = false];

  // Error Reason
  optional ErrorReason error_reason = 4;
}

// Possible error reasons
// The server-side errors are returned in the response from the server.
// The client-side errors are returned by the client-side code when it doesn't
// have a response from the server.
enum ErrorReason {

  NO_ERROR_OCCURRED = 0;         // No error has occurred
  // Server-side errors
  BAD_REQUEST_DATA = 1; // Server received bad request data
  BAD_REQUEST_PROTO = 2; // Server received bad request proto
  SERVICE_NOT_FOUND = 3; // Service not found on server
  METHOD_NOT_FOUND = 4; // Method not found on server
  RPC_ERROR = 5; // Rpc threw exception on server
  RPC_FAILED = 6; // Rpc failed on server

  // Client-side errors (these are returned by the client-side code)
  INVALID_REQUEST_PROTO = 7; // Rpc was called with invalid request proto
  BAD_RESPONSE_PROTO = 8; // Server returned a bad response proto
  UNKNOWN_HOST = 9; // Could not find supplied host
  IO_ERROR = 10; // I/O error while communicating with server
}

message QueryForServiceRequest {
   // RPC Service full name
   required string service_name = 1;
}

message QueryForServiceResponse {
   // RPC Service full name
   optional string service_name = 1;

   // Service is registered with RPC server
   required bool registered = 2 [default = false];
}

service DiscoveryService {
  rpc QueryForService (QueryForServiceRequest) returns (QueryForServiceResponse);
}

